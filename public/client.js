// Generated by eXtraCoffeeScript 1.2.0p
(function() {
  var Login, add_log, channel, do_login, login, user, _log;

  /* imported /Users/wilson/Dev/madtalk/public/class/Login.coffee
  */


  Login = (function() {

    Login.name = 'Login';

    function Login(cfg) {
      var _el, _ref;
      this.cfg = cfg != null ? cfg : {
        el: '#login'
      };
      this.user = ((_ref = this.cfg.user) != null ? _ref.nick : void 0) ? this.cfg.user : null;
      if (typeof this.cfg.logined === 'function') this.logined = this.cfg.logined;
      /* private
      */

      _el = null;
      /* public
      */

      Object.defineProperties(this, {
        el: {
          get: function() {
            return _el;
          },
          set: function(value) {
            _el = value;
            if (typeof _el === 'string') return _el = document.querySelector(_el);
          }
        },
        inited: {
          get: function() {
            return _el != null;
          }
        },
        hidden: {
          get: function() {
            return _el.hidden;
          }
        }
      });
    }

    /* public methods
    */


    Login.prototype.init = function() {
      var _ref, _ref2,
        _this = this;
      if (this.inited) return;
      console.log('init');
      if (this.cfg.el) this.el = this.cfg.el;
      this.show(!((_ref = this.user) != null ? _ref.nick : void 0));
      this.form = this.el.querySelector('form');
      this.form.onsubmit = function(e) {
        e.preventDefault();
        _this.user = {
          nick: _this.form.nick.value
        };
        _this.show(false);
        if (typeof _this.logined === "function") _this.logined(_this.user);
        return false;
      };
      if ((_ref2 = this.user) != null ? _ref2.nick : void 0) {
        if (typeof this.logined === "function") this.logined(this.user);
      }
      return this;
    };

    Login.prototype.show = function(show) {
      if (show == null) show = true;
      console.log('show', show, this.el);
      this.el.hidden = !show;
      return this;
    };

    Login.prototype.hide = function() {
      return this.show(false);
    };

    return Login;

  })();

  channel = io.connect('/0');

  try {
    user = sessionStorage.user;
    if (user) {
      user = JSON.parse(user);
      if (!(user != null ? user.nick : void 0)) throw 'bad user session data';
    } else {
      user = null;
    }
  } catch (e) {
    console.error('bad user session data', e);
    user = null;
  }

  _log = null;

  add_log = function(recs) {
    if (!Array.isArray(recs)) recs = [recs];
    recs = recs.map(function(rec) {
      return "<li>" + (new Date(rec.ts).toLocaleTimeString()) + " " + rec.user.nick + " - " + rec.data + "</li>";
    });
    _log.append(recs.join('\n'));
  };

  do_login = function(user) {
    console.log('do_login', user);
    channel.emit('login', user, function(upduser, records) {
      if (upduser.err) {
        return console.error(upduser);
      } else {
        console.log('logined', upduser);
        user.uid = upduser.uid;
        channel.el = document.querySelector('#channel');
        channel.el.hidden = false;
        channel.on('online', function(user) {
          return console.log('online', user);
        });
        channel.on('offline', function(user) {
          return console.log('offline', user);
        });
        channel.on('message', function(data) {
          console.log('got message', data);
          return add_log(data);
        });
        channel.message = function(data) {
          return channel.emit('message', data, function(ok) {
            if (ok) {
              return console.log('message sent', data);
            } else {
              return console.error(data);
            }
          });
        };
        window.onbeforeunload = function() {
          sessionStorage.user = JSON.stringify(user);
          return 'sure to exit?';
        };
        $('#entry').keydown(function(e) {
          if (e.keyCode === 13 && !(e.ctrlKey || e.metaKey || e.shiftKey || e.altKey)) {
            channel.message({
              type: 'text',
              data: this.value
            });
            this.value = '';
            return false;
          }
        });
        _log.empty();
        add_log(records);
      }
    });
  };

  login = new Login({
    el: '#login',
    user: user,
    logined: do_login
  });

  window.channel = channel;

  channel.on('connect', function() {
    console.log('connected');
    return $(function() {
      console.log('domready');
      $('#conn-status').text('online');
      _log = $('#log');
      channel.on('system', function(data) {
        return console.log('got system message', data);
      });
      if (!login.inited) return login.init();
    });
  });

  channel.on('disconnect', function() {
    return $('#conn-status').text('offline');
  });

}).call(this);
