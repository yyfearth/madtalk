// Generated by eXtraCoffeeScript 1.2.0r
(function() {
  var Login, add_log, channel, do_login, login, user, xss_safe, _log, _toolbar, _users;

  /* imported /Users/wilson/Dev/madtalk/client/classes/Login.coffee
  */


  Login = (function() {

    Login.name = 'Login';

    function Login(cfg) {
      var _el, _ref;
      this.cfg = cfg != null ? cfg : {
        el: '#login'
      };
      this.user = ((_ref = this.cfg.user) != null ? _ref.nick : void 0) ? this.cfg.user : null;
      if (typeof this.cfg.logined === 'function') this.logined = this.cfg.logined;
      /* private
      */

      _el = null;
      /* public
      */

      Object.defineProperties(this, {
        el: {
          get: function() {
            return _el;
          },
          set: function(value) {
            _el = value;
            if (typeof _el === 'string') return _el = document.querySelector(_el);
          }
        },
        inited: {
          get: function() {
            return _el != null;
          }
        },
        hidden: {
          get: function() {
            return _el.hidden;
          }
        }
      });
    }

    /* static
    */


    Login.create = function(cfg) {
      return new this(cfg);
    };

    /* public
    */


    Login.prototype.init = function() {
      var _ref, _ref2,
        _this = this;
      if (this.inited) return;
      console.log('init');
      if (this.cfg.el) this.el = this.cfg.el;
      this.show(!((_ref = this.user) != null ? _ref.nick : void 0));
      this.form = this.el.querySelector('form');
      this.form.onsubmit = function(e) {
        e.preventDefault();
        _this.user = {
          nick: _this.form.nick.value
        };
        _this.show(false);
        if (typeof _this.logined === "function") _this.logined(_this.user);
        return false;
      };
      if ((_ref2 = this.user) != null ? _ref2.nick : void 0) {
        if (typeof this.logined === "function") this.logined(this.user);
      }
      return this;
    };

    Login.prototype.show = function(show) {
      if (show == null) show = true;
      console.log('show', show, this.el);
      this.el.hidden = !show;
      return this;
    };

    Login.prototype.hide = function() {
      return this.show(false);
    };

    return Login;

  })();

  /* imported /Users/wilson/Dev/madtalk/client/utils/xss_safe.coffee
  */


  xss_safe = {
    replace_regex: /<|>/g,
    replace_dict: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    },
    esc_regex: /\\[\/\\nbtvfr'"0(u\w{4})(x\w{2})]/g,
    esc_dict: {
      '\\': '\\',
      '\/': '\/',
      '"': '"',
      "'": "'",
      '0': '\x00',
      'n': '\n',
      'b': '\b',
      't': '\t',
      'v': '\v',
      'f': '\f',
      'r': '\r'
    },
    url: function(url) {
      return encodeURI(url);
    },
    attr: function(str) {
      return str.toString().replace(/\W/g, function(ch) {
        var s;
        s = ch.charCodeAt(0);
        return ch = s < 255 ? "&#" + s + ";" : ch;
      });
    },
    js: function(str, noesc) {
      var _this = this;
      if (!noesc) {
        str = str.replace(this.esc_regex, function(ch) {
          ch = ch.slice(1);
          if (_this.esc_dict[ch] != null) {
            return _this.esc_dict[ch];
          } else {
            return String.fromCharCode(Number(ch.clice(1)));
          }
        });
      }
      return str.replace(/\W/g, function(ch) {
        var s;
        s = ch.charCodeAt(0);
        if (s < 255) {
          s = s.toString(16);
          if (s.length < 2) s = '0' + s;
          return '\\x' + s;
        } else {
          return ch;
        }
      });
    },
    str: function(str) {
      var _this = this;
      return str.toString().replace(this.replace_regex, function(p) {
        return _this.replace_dict[p];
      });
    },
    json: function(json, parse) {
      var is_str;
      is_str = typeof json === 'string';
      if (!is_str) json = JSON.stringify(json);
      json = this.str(json);
      if (is_str || !parse) {
        return json;
      } else {
        return JSON.parse(json);
      }
    }
  };

  channel = io.connect('/0');

  try {
    user = sessionStorage.user;
    if (user) {
      user = JSON.parse(user);
      if (!(user != null ? user.nick : void 0)) throw 'bad user session data';
    } else {
      user = null;
    }
  } catch (e) {
    console.error('bad user session data', e);
    user = null;
  }

  _log = null;

  _users = null;

  _toolbar = null;

  add_log = function(recs) {
    if (!Array.isArray(recs)) recs = [recs];
    recs = recs.map(function(rec) {
      return "<li><label>" + (xss_safe.str(rec.user.nick)) + "<br/>" + (new Date(rec.ts).toLocaleTimeString()) + "</label><div>" + (xss_safe.str(rec.data).replace(/\n/g, '<br/>')) + "</div></li>";
    });
    _log.append(recs.join('\n'));
    _log.css('padding-bottom', _toolbar.outerHeight() + 10 + 'px');
    setTimeout(function() {
      return window.scrollTo(0, document.body.scrollHeight);
    }, 0);
  };

  do_login = function(user) {
    console.log('do_login', user);
    channel.emit('login', user, function(upduser, ch) {
      var online_u, users;
      if (upduser.err) {
        console.error(upduser);
        return alert(upduser.err + '\n reload the app pls!');
      } else {
        console.log('logined', upduser, ch);
        user.uid = upduser.uid;
        channel.records = ch.records || [];
        users = channel.users = ch.users;
        channel.ts = ch.ts;
        users.index = {};
        users.forEach(function(u) {
          return users.index[u.nick] = u;
        });
        channel.el = document.querySelector('#channel');
        channel.el.hidden = false;
        channel.on('online', function(user) {
          console.log('online', user);
          if (users.index[user.nick] == null) users.push(user);
          users.index[user.nick].status === 'online';
          return _log.append("<li>" + user.nick + " Online</li>");
        });
        channel.on('offline', function(user) {
          users.index[user.nick].status === 'offline';
          console.log('offline', user);
          return _log.append("<li>" + user.nick + " Offline</li>");
        });
        channel.on('message', function(data) {
          console.log('got message', data);
          return add_log(data);
        });
        channel.message = function(data) {
          return channel.emit('message', data, function(ok) {
            if (ok) {
              return console.log('message sent', data);
            } else {
              return console.error(data);
            }
          });
        };
        window.onbeforeunload = function() {
          sessionStorage.user = JSON.stringify(user);
          return 'sure to exit?';
        };
        _log.empty();
        add_log(ch.records);
        online_u = users.filter(function(u) {
          return u.status !== 'offline';
        });
        _users.text("" + online_u.length + " / " + users.length);
        $('#user-nick').text(user.nick);
      }
    });
  };

  login = Login.create({
    el: '#login',
    user: user,
    logined: do_login
  });

  window.channel = channel;

  channel.on('connect', function() {
    console.log('connected');
    return $(function() {
      var resize, _entry;
      console.log('domready');
      $('#conn-status').text('online');
      _log = $('#log');
      _users = $('#users-list');
      _toolbar = $('#toolbar');
      _entry = $('#entry');
      _users.click(function() {
        return alert(channel.users.map(function(u) {
          return "" + u.nick + " " + u.status;
        }).join('\n'));
      });
      resize = function() {
        return setTimeout(function() {
          var _e;
          _e = _entry[0];
          _e.style.height = 'auto';
          _e.style.height = "" + (Math.min(Math.max(46, _e.scrollHeight), window.innerHeight / 2)) + "px";
          return _log.css('padding-bottom', _toolbar.outerHeight() + 10 + 'px');
        }, 0);
      };
      _entry.bind({
        keydown: resize,
        change: resize,
        cut: resize,
        past: resize,
        drop: resize
      });
      _entry.keydown(function(e) {
        if (e.keyCode === 13 && !(e.ctrlKey || e.metaKey || e.shiftKey || e.altKey)) {
          if (!this.value.trim()) return false;
          channel.message({
            type: 'text',
            data: this.value
          });
          this.value = '';
          return false;
        }
      });
      _entry.focus().change();
      channel.on('system', function(data) {
        return console.log('got system message', data);
      });
      if (!login.inited) return login.init();
    });
  });

  channel.on('disconnect', function() {
    return $('#conn-status').text('offline');
  });

}).call(this);
